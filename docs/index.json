[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "ivis-core/client/src/ivis/AnimationCommon.js",
    "content": "/** @module AnimationCommon */\nimport React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {withComponentMixins, createComponentMixin} from \"../lib/decorator-helpers\";\nimport styles from \"./AnimationCommon.scss\";\n\n/**\n* Context defined by the {@link Animation} component containing animation's state.\n*/\nexport const AnimationStatusContext = React.createContext(null);\n/** Context provided by the Animation component containing animation's control\n    * functions. */\nexport const AnimationControlContext = React.createContext(null);\n/** Context provided by the Animation component containing the visualization\n * data sets produced by Data sources.\n *\n * @category Context\n *\n */\nexport const AnimationDataContext = React.createContext(null);\n\nexport const withAnimationControl = createComponentMixin({\n    contexts: [\n        {context: AnimationStatusContext, propName: 'animationStatus'},\n        {context: AnimationControlContext, propName: 'animationControl'}\n    ]\n});\n\nexport const withAnimationStatus = createComponentMixin({\n    contexts: [\n        {context: AnimationStatusContext, propName: 'animationStatus'},\n    ]\n});\n\nexport const withAnimationData = createComponentMixin({\n    contexts: [ {context: AnimationDataContext, propName: 'animationData'} ]\n});\n\n\n\n/**\n * Function\n *\n * @param Stationary visualization component.\n * @return Animated version of given visualization component.\n *\n * @function\n */\nexport function animated(VisualizationComp) {\n    /**\n     * Component wrapping visualization component, displaying an overlay.\n     *\n     * @component\n     * @example\n     */\n    @withComponentMixins([withAnimationData, withAnimationStatus])\n    class AnimatedContent extends Component {\n        static propTypes = {\n            animationStatus: PropTypes.object.isRequired,\n            animationData: PropTypes.object.isRequired,\n            /**\n             * Key of the Data source, from which to receive data.\n             *\n             * @static\n             */\n            dataSourceKey: PropTypes.string.isRequired,\n\n            forwardRef: PropTypes.func,\n        }\n\n        constructor(props) {\n            super(props);\n\n            this.lastValidData = null;\n        }\n\n        render() {\n            const {\n                forwardRef,\n                dataSourceKey,\n                animationData,\n                animationStatus,\n                ...visualizationProps\n            } = this.props;\n\n            let message = null;\n            let withSpinner = false;\n\n            let data = (animationData && animationData[dataSourceKey]) || this.lastValidData;\n\n            if (data !== null) {\n                this.lastValidData = data;\n            }\n\n            if (animationStatus.error) {\n                message = new String(animationStatus.error);\n            } else if (animationStatus.isBuffering) {\n                withSpinner = true;\n                message =  \"Loading...\";\n            }\n\n            return (\n                <div ref={node => this.containerNode = node} className={styles.animatedContainer}>\n                    {message &&\n                        <div className={styles.loadingOverlay}>\n                            <div className={styles.loadingMsgContainer}>\n                                {withSpinner &&\n                                    <div className={styles.loadingSpinner + \" spinner-border\"} role={\"status\"}>\n                                        <span className={\"sr-only\"}>Loading</span>\n                                    </div>\n                                }\n                                <span className={styles.loadingMsg}>{message}</span>\n                            </div>\n                        </div>\n                    }\n                    {data && <VisualizationComp {...visualizationProps} data={data} ref={forwardRef} />}\n                </div>\n            );\n        }\n    }\n\n    return React.forwardRef(function AnimatedVisualization(props, ref) {\n        return <AnimatedContent {...props} forwardRef={ref} />;\n    });\n}\n\nexport * from '../lib/animation-interpolations';\n",
    "static": true,
    "longname": "/home/dburian/Documents/bak/ivis-core/client/src/ivis/AnimationCommon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "AnimationStatusContext",
    "memberof": "ivis-core/client/src/ivis/AnimationCommon.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/AnimationCommon.js~AnimationStatusContext",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/ivis/AnimationCommon.js",
    "importStyle": "{AnimationStatusContext}",
    "description": "Context defined by the {@link Animation} component containing animation's state.",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "AnimationControlContext",
    "memberof": "ivis-core/client/src/ivis/AnimationCommon.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/AnimationCommon.js~AnimationControlContext",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/ivis/AnimationCommon.js",
    "importStyle": "{AnimationControlContext}",
    "description": "Context provided by the Animation component containing animation's control\nfunctions.",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "AnimationDataContext",
    "memberof": "ivis-core/client/src/ivis/AnimationCommon.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/AnimationCommon.js~AnimationDataContext",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/ivis/AnimationCommon.js",
    "importStyle": "{AnimationDataContext}",
    "description": "Context provided by the Animation component containing the visualization\ndata sets produced by Data sources.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "Context"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "withAnimationControl",
    "memberof": "ivis-core/client/src/ivis/AnimationCommon.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/AnimationCommon.js~withAnimationControl",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/ivis/AnimationCommon.js",
    "importStyle": "{withAnimationControl}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "variable",
    "name": "withAnimationStatus",
    "memberof": "ivis-core/client/src/ivis/AnimationCommon.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/AnimationCommon.js~withAnimationStatus",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/ivis/AnimationCommon.js",
    "importStyle": "{withAnimationStatus}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "name": "withAnimationData",
    "memberof": "ivis-core/client/src/ivis/AnimationCommon.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/AnimationCommon.js~withAnimationData",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/ivis/AnimationCommon.js",
    "importStyle": "{withAnimationData}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "function",
    "name": "animated",
    "memberof": "ivis-core/client/src/ivis/AnimationCommon.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ivis-core/client/src/ivis/AnimationCommon.js~animated",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/ivis/AnimationCommon.js",
    "importStyle": "{animated}",
    "description": "Function",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "Stationary",
        "description": "visualization component."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Animated version of given visualization component."
    }
  },
  {
    "__docId__": 8,
    "kind": "file",
    "name": "ivis-core/client/src/ivis/LiveAnimation.js",
    "content": "import React, {Component} from \"react\";\nimport axios from \"../lib/axios\";\nimport {getUrl} from \"../lib/urls\";\nimport PropTypes from \"prop-types\";\nimport {\n    AnimationStatusContext,\n    AnimationControlContext,\n    AnimationDataContext,\n} from \"./AnimationCommon\";\nimport {SigSetInterpolator} from \"../lib/animation-helpers\";\nimport {withAsyncErrorHandler} from \"../lib/error-handling\";\nimport {withComponentMixins} from \"../lib/decorator-helpers\";\nimport {intervalAccessMixin, TimeContext} from \"./TimeContext\";\nimport {IntervalSpec} from \"./TimeInterval\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nconst defaultPollRate = 1000;\nconst minPollRate = 50;\n\nclass LiveAnimation extends Component {\n    static propTypes = {\n        dataSources: PropTypes.object.isRequired,\n        animationId: PropTypes.string.isRequired,\n\n        intervalSpanBefore: PropTypes.object,\n        intervalSpanAfter: PropTypes.object,\n\n        initialStatus: PropTypes.object,\n\n        pollRate: PropTypes.number,\n\n        children: PropTypes.node,\n    }\n\n    static defaultProps = {\n        intervalSpanBefore: moment.duration(10, 'm'),\n        intervalSpanAfter: moment.duration(3, 'm'),\n\n        pollRate: defaultPollRate,\n        initialStatus: {isPlaying: false},\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.initialIntervalSpec = new IntervalSpec(\n            moment(Date.now() - props.intervalSpanBefore.asMilliseconds()),\n            moment(Date.now() + props.intervalSpanAfter.asMilliseconds()),\n            null,\n            null\n        );\n    }\n\n    render() {\n        const pollRate = this.props.pollRate === null || Number.isNaN(this.props.pollRate) ?\n            minPollRate :\n            Math.max(minPollRate, this.props.pollRate)\n        ;\n\n\n        const childrenRender = (props) => {\n            return (\n                <Animation\n                    animationId={this.props.animationId}\n                    pollRate={pollRate}\n\n                    intervalSpanBefore={this.props.intervalSpanBefore}\n                    intervalSpanAfter={this.props.intervalSpanAfter}\n\n                    initialStatus={this.props.initialStatus}\n                    {...props}>\n                    {this.props.children}\n                </Animation>\n            );\n        };\n\n\n        return (\n            <TimeContext\n                initialIntervalSpec={this.initialIntervalSpec}\n            >\n                <DataAccess\n                    dataSources={this.props.dataSources}\n\n                    render={childrenRender}\n                />\n            </TimeContext>\n        );\n    }\n}\n\nclass GenericDataSource {\n    constructor(config, dataAccess) {\n        this.conf = {\n            formatData: config.formatData || null,\n            history: config.history || null,\n            intpArity: config.interpolation.arity,\n            signalAggs: config.signalAggs || ['avg'],\n        };\n\n        this.dataAccess = dataAccess;\n\n        this.sigSets = [];\n        for (const sigSetConf of config.sigSets) {\n            const signalCids = sigSetConf.signalCids;\n            this.sigSets.push({\n                cid: sigSetConf.cid,\n                signalCids,\n                intp: new SigSetInterpolator(signalCids, this.conf.signalAggs, config.interpolation),\n            });\n        }\n\n        this.clear();\n    }\n\n    addKeyframe(kf) {\n        const data = this.conf.formatData ? this.conf.formatData(kf.data) : kf.data;\n\n        this.buffer.push({ts: kf.ts, data});\n    }\n\n    clear() {\n        for (const sigSet of this.sigSets) {\n            sigSet.intp.clearArgs();\n        }\n\n        this.buffer = [];\n        this.history = [];\n\n        this.tss = [];\n        this.lastShiftNull = true;\n        this.kfPillow = 0;\n    }\n\n    getEmptyData() {\n        const emptyData = {};\n        for (const sigSet of this.sigSets) {\n            if (this.conf.history) emptyData[sigSet.cid] = [];\n            else emptyData[sigSet.cid] = sigSet.intp.interpolate(-1);\n        }\n\n        return emptyData;\n    }\n\n    shiftTo(ts) {\n        let minKfCount = this.conf.intpArity;\n\n        if (this.lastShiftNull) {\n            minKfCount += this.kfPillow;\n        }\n\n        const result = this._shiftTo(ts, minKfCount);\n\n        if (!this.lastShiftNull && result === null) {\n            this.kfPillow += 1;\n        }\n        this.lastShiftNull = result === null;\n\n        return result;\n    }\n\n    _shiftTo(ts, minKfCount) {\n        if (this.buffer.length < minKfCount) return null;\n\n        if (this.conf.history) {\n            const historyLastTs = this.history.length > 0 ? this.history[this.history.length - 1].ts : -1;\n            let i = this.buffer.findIndex(kf => kf.ts > historyLastTs);\n            while (i >= 0 && this.buffer.length > i && this.buffer[i].ts < ts) {\n                this.history.push(this.buffer[i]);\n                i++;\n            }\n\n            const minTs = ts - this.conf.history;\n            const newHistoryStartIdx = this.history.findIndex(kf => kf.ts >= minTs);\n            this.history.splice(0, newHistoryStartIdx);\n        }\n\n        const intpArity = this.conf.intpArity;\n        let kfsChanged = false;\n        while (this.buffer[intpArity - 1].ts < ts && this.buffer.length > intpArity) {\n            const delCount = Math.min(\n                intpArity - 1,\n                this.buffer.length - intpArity\n            );\n            kfsChanged = true;\n\n            this.buffer.splice(0, delCount);\n        }\n\n        if (this.buffer[intpArity - 1].ts < ts) return null;\n\n        const data = {};\n        const getSigSetKf = (cid, kf) => ({ts: kf.ts, data: kf.data[cid]});\n        for (const sigSet of this.sigSets) {\n            if (kfsChanged || !sigSet.intp.hasCachedArgs) {\n                const sigSetBuffer = [];\n                for (let i = 0; i < intpArity; i++) {\n                    sigSetBuffer.push(getSigSetKf(sigSet.cid, this.buffer[i]));\n                }\n\n                sigSet.intp.rebuildArgs(sigSetBuffer);\n            }\n\n            const currentData = sigSet.intp.interpolate(ts);\n            if (this.conf.history) {\n                const sigSetHistory = this.history.map(kf => getSigSetKf(sigSet.cid, kf));\n                sigSetHistory.push({ts, data: currentData});\n                data[sigSet.cid] = sigSetHistory;\n            } else {\n                data[sigSet.cid] = currentData;\n            }\n        }\n\n        return data;\n    }\n}\n\nclass TimeSeriesDataSource extends GenericDataSource{\n    constructor(config, dataAccess) {\n        super({...config}, dataAccess);\n\n        this.lastGenDataRev = [];\n    }\n\n    shiftTo(ts) {\n        const prevs = this._getPrevs();\n\n        const absIntv = this.dataAccess.getIntervalAbsolute();\n        this.conf.history = absIntv.to.valueOf() - absIntv.from.valueOf();\n\n        const genericData = super.shiftTo(ts);\n\n        if (genericData === null) return null;\n\n        const tsToMoment = (kf) => {\n            kf.ts = moment(kf.ts);\n            return kf;\n        };\n\n        const data = {};\n        for (const sigSet of this.sigSets) {\n            data[sigSet.cid] = {\n                main: genericData[sigSet.cid].map(tsToMoment),\n            };\n\n            if (prevs) {\n                data[sigSet.cid].prev = prevs[sigSet.cid];\n            }\n        }\n\n        return data;\n    }\n\n    getEmptyData() {\n        const emptyData = {};\n        for (const sigSet of this.sigSets) {\n            emptyData[sigSet.cid] = { main: [] };\n        }\n\n        return emptyData;\n    }\n\n    _getPrevs(ts) {\n        const findPrevIdx = arr => {\n            let i = 0;\n            while (i < arr.length && arr[i].ts <= ts) i++;\n\n            if (i === arr.length || i === 0) return null;\n            else return i-1;\n        };\n\n        let prevIdx = findPrevIdx(this.history);\n        let arr = this.history;\n        if (prevIdx === null) {\n            prevIdx = findPrevIdx(this.buffer);\n            arr = this.buffer;\n        }\n\n        let prevs = null;\n        if (prevIdx !== null) {\n            prevs = {};\n            for (const sigSet of this.sigSets) {\n                prevs[sigSet.cid] = arr[prevIdx].data[sigSet.cid];\n            }\n        }\n\n        return prevs;\n    }\n}\n\nconst dataSourceTypes = {\n    generic: GenericDataSource,\n    timeSeries: TimeSeriesDataSource,\n};\n\n@withComponentMixins([intervalAccessMixin()])\nclass DataAccess extends Component {\n    static propTypes = {\n        dataSources: PropTypes.object.isRequired,\n        render: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            addKeyframe: ::this.addKeyframe,\n            clearKeyframes: ::this.clearKeyframes,\n            shiftTo: ::this.shiftTo,\n            getEmptyData: ::this.getEmptyData,\n\n            dataSources: props.dataSources,\n        };\n\n        this.resetDataSources();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!_.isEqual(this.props.dataSources, prevProps.dataSources)) {\n            this.resetDataSources();\n            this.setState({dataSources: this.props.dataSources});\n        }\n    }\n\n    addKeyframe(kf) {\n        for (const dtSrcKey of Object.keys(this.dataSources)) {\n            this.dataSources[dtSrcKey].addKeyframe(kf);\n        }\n    }\n\n    clearKeyframes() {\n        for (const dtSrcKey of Object.keys(this.dataSources)) {\n            this.dataSources[dtSrcKey].clear();\n        }\n    }\n\n    shiftTo(ts) {\n        const data = {};\n        for (const dtSrcKey of Object.keys(this.dataSources)) {\n            data[dtSrcKey] = this.dataSources[dtSrcKey].shiftTo(ts);\n            if (data[dtSrcKey] === null) return null;\n        }\n\n        return data;\n    }\n\n    getEmptyData() {\n        const data = {};\n        for (const dtSrcKey of Object.keys(this.dataSources)) {\n            data[dtSrcKey] = this.dataSources[dtSrcKey].getEmptyData();\n        }\n\n        return data;\n    }\n\n    resetDataSources() {\n        this.dataSources = {};\n        const dtSourceConfigs = this.props.dataSources;\n        for (const dtSrcKey of Object.keys(dtSourceConfigs)) {\n            const config = dtSourceConfigs[dtSrcKey];\n            const DataSourceType = dataSourceTypes[config.type];\n\n            this.dataSources[dtSrcKey] = new DataSourceType(config, this);\n        }\n    }\n\n    render() {\n        return this.props.render({...this.state});\n    }\n}\n\n@withComponentMixins([intervalAccessMixin()])\nclass Animation extends Component {\n    static propTypes = {\n        pollRate: PropTypes.number.isRequired,\n        animationId: PropTypes.string.isRequired,\n\n        initialStatus: PropTypes.object.isRequired,\n\n        intervalSpanBefore: PropTypes.object.isRequired,\n        intervalSpanAfter: PropTypes.object.isRequired,\n\n        addKeyframe: PropTypes.func.isRequired,\n        clearKeyframes: PropTypes.func.isRequired,\n        shiftTo: PropTypes.func.isRequired,\n        getEmptyData: PropTypes.func.isRequired,\n\n        dataSources: PropTypes.object.isRequired,\n\n        children: PropTypes.node,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            status: this.getInitStatus(),\n            controls: {\n                play: ::this.play,\n                pause: ::this.pause\n            },\n            animationData: props.getEmptyData(),\n        };\n        this.isRefreshing = false;\n        this.refreshBound = ::this.refresh;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.pollRate !== prevProps.pollRate) {\n            clearInterval(this.fetchStatusInterval);\n            this.fetchStatusInterval = setInterval(::this.fetchStatus, this.props.pollRate);\n        }\n\n        if (this.props.animationId !== prevProps.animationId ||\n            this.props.dataSources !== prevProps.dataSources) {\n            this.masterReset();\n        }\n\n        if (this.props.intervalSpanBefore.asMilliseconds() !== prevProps.intervalSpanBefore.asMilliseconds()||\n            this.props.intervalSpanAfter.asMilliseconds() !== prevProps.intervalSpanAfter.asMilliseconds()) {\n            this.updateInterval();\n        }\n    }\n\n    componentDidMount() {\n        if (this.state.status.isPlaying) this.play();\n        this.fetchStatusInterval = setInterval(::this.fetchStatus, this.props.pollRate);\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.nextFrameId);\n        clearInterval(this.fetchStatusInterval);\n    }\n\n    masterReset() {\n        this.pause();\n\n        const initStatus = this.getInitStatus();\n        this.setStatus(initStatus);\n        if (initStatus.isPlaying) {\n            this.play();\n        }\n\n        this.props.clearKeyframes();\n        this.setState({animationData: this.props.getEmptyData()});\n    }\n\n    errorHandler(error) {\n        console.error(error);\n\n        cancelAnimationFrame(this.nextFrameId);\n        clearInterval(this.fetchStatusInterval);\n        this.setState({controls: {}});\n        this.setStatus({error});\n\n        return true;\n    }\n\n    getInitStatus() {\n        const initialStatus = this.props.initialStatus;\n\n        const newStatus = {\n            isBuffering: false,\n            isPlaying: !!initialStatus.isPlaying,\n            position: Date.now(),\n            playbackSpeedFactor: 1,\n        };\n\n        return newStatus;\n    }\n\n    updateInterval(currentPosition = this.state.status.position) {\n        const from = moment(currentPosition - this.props.intervalSpanBefore.asMilliseconds());\n        const to = moment(currentPosition + this.props.intervalSpanAfter.asMilliseconds());\n        const newSpec = new IntervalSpec(\n            from,\n            to,\n            null,\n            null\n        );\n\n        this.getInterval().setSpec(newSpec, true);\n    }\n\n    handleNewStatus(newStatus) {\n        const nextStatus = {};\n\n        if (newStatus.isPlaying && !this.isRefreshing) {\n            nextStatus.position = newStatus.position;\n            this.handlePlay(nextStatus);\n        } else if (!newStatus && this.isRefreshing) {\n            this.handlePause(nextStatus);\n        }\n\n        if (newStatus.isPlaying) {\n            const keyframe = { data: newStatus.data, ts: newStatus.position};\n\n            this.props.addKeyframe(keyframe);\n        }\n\n        if (Object.keys(nextStatus).length > 0) {\n            this.setStatus(nextStatus);\n        }\n    }\n\n    setStatus(status) {\n        this.setState((prevState) => {\n            const newStatus = Object.assign({}, prevState.status, status);\n            if (newStatus.position !== prevState.status.position) {\n                this.updateInterval(newStatus.position);\n            }\n\n            return {status: newStatus};\n        });\n    }\n\n\n    refresh(elapsedTs) {\n        const interval = this.savedInterval || elapsedTs - this.lastRefreshTs;\n        this.savedInterval = null;\n\n        this.lastRefreshTs = performance.now();\n        const nextPosition = this.state.status.position + interval;\n\n        const data = this.props.shiftTo(nextPosition);\n\n        if (data === null) {\n            this.savedInterval = interval;\n            if (!this.state.status.isBuffering)\n                this.setStatus({isBuffering: true});\n        } else {\n            this.setState({animationData: data});\n            this.setStatus({position: nextPosition, isBuffering: false});\n        }\n\n        this.nextFrameId = requestAnimationFrame(this.refreshBound);\n    }\n\n    handlePlay(nextStatus = {}) {\n        if (this.isRefreshing) return nextStatus;\n\n        this.isRefreshing = true;\n        nextStatus.isPlaying = true;\n        nextStatus.isBuffering = true;\n\n        this.props.clearKeyframes();\n\n        this.lastRefreshTs = performance.now();\n        this.nextFrameId = requestAnimationFrame(::this.refresh);\n\n        return nextStatus;\n    }\n\n    handlePause(nextStatus = {}) {\n        this.isRefreshing = false;\n\n        cancelAnimationFrame(this.nextFrameId);\n        nextStatus.isPlaying = false;\n        nextStatus.isBuffering = false;\n\n        return nextStatus;\n    }\n\n\n    play() {\n        this.setStatus({isPlaying: true, isBuffering: true});\n        this.sendControlRequest(\"play\");\n    }\n\n    pause() {\n        this.setStatus(this.handlePause());\n        this.sendControlRequest(\"pause\");\n    }\n\n    @withAsyncErrorHandler\n    async sendControlRequest(controlName) {\n        const url = getUrl(\"rest/animation/\" + this.props.animationId + \"/\" + controlName);\n        const ctrlPromise = axios.post(url);\n\n        this.fetchStatus();\n\n        await ctrlPromise;\n    }\n\n    @withAsyncErrorHandler\n    async fetchStatus() {\n        const animationId = this.props.animationId;\n        const url = getUrl(\"rest/animation/\" + animationId + \"/status\");\n        const res = await axios.get(url);\n\n        if (this.props.animationId === animationId) {\n            this.handleNewStatus(res.data);\n        }\n    }\n\n    render() {\n        return (\n            <AnimationStatusContext.Provider value={this.state.status}>\n                <AnimationControlContext.Provider value={this.state.controls}>\n                    <AnimationDataContext.Provider value={this.state.animationData}>\n                        {this.props.children}\n                    </AnimationDataContext.Provider>\n                </AnimationControlContext.Provider>\n            </AnimationStatusContext.Provider>\n        );\n    }\n}\n\nexport {\n    LiveAnimation\n};\n",
    "static": true,
    "longname": "/home/dburian/Documents/bak/ivis-core/client/src/ivis/LiveAnimation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "name": "defaultPollRate",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~defaultPollRate",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/LiveAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "name": "minPollRate",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~minPollRate",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/LiveAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "class",
    "name": "GenericDataSource",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/LiveAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 12,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true
  },
  {
    "__docId__": 13,
    "kind": "member",
    "name": "conf",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#conf",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "{\"formatData\": *, \"history\": *, \"intpArity\": *, \"signalAggs\": *}"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "dataAccess",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#dataAccess",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "name": "sigSets",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#sigSets",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "method",
    "name": "addKeyframe",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#addKeyframe",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "kf",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 17,
    "kind": "method",
    "name": "clear",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#clear",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 18,
    "kind": "member",
    "name": "buffer",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#buffer",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "name": "history",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#history",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "name": "tss",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#tss",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "lastShiftNull",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#lastShiftNull",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "kfPillow",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#kfPillow",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "name": "getEmptyData",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#getEmptyData",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "name": "shiftTo",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#shiftTo",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "_shiftTo",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~GenericDataSource#_shiftTo",
    "access": "private",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      },
      {
        "name": "minKfCount",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "class",
    "name": "TimeSeriesDataSource",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~TimeSeriesDataSource",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/LiveAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "interface": false,
    "extends": [
      "GenericDataSource"
    ]
  },
  {
    "__docId__": 29,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~TimeSeriesDataSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true
  },
  {
    "__docId__": 30,
    "kind": "member",
    "name": "lastGenDataRev",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~TimeSeriesDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~TimeSeriesDataSource#lastGenDataRev",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "shiftTo",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~TimeSeriesDataSource#shiftTo",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "getEmptyData",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~TimeSeriesDataSource#getEmptyData",
    "access": "public",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "_getPrevs",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~TimeSeriesDataSource#_getPrevs",
    "access": "private",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "variable",
    "name": "dataSourceTypes",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~dataSourceTypes",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/LiveAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "type": {
      "types": [
        "{\"generic\": *, \"timeSeries\": *}"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "class",
    "name": "DataAccess",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/LiveAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "decorators": [
      {
        "name": "withComponentMixins",
        "arguments": "([intervalAccessMixin()])"
      }
    ],
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 36,
    "kind": "member",
    "name": "propTypes",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 304,
    "undocument": true
  },
  {
    "__docId__": 38,
    "kind": "member",
    "name": "state",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess#state",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "type": {
      "types": [
        "{\"addKeyframe\": *, \"clearKeyframes\": *, \"shiftTo\": *, \"getEmptyData\": *, \"dataSources\": *}"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 319,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 40,
    "kind": "method",
    "name": "addKeyframe",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess#addKeyframe",
    "access": "public",
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "params": [
      {
        "name": "kf",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "clearKeyframes",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess#clearKeyframes",
    "access": "public",
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "shiftTo",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess#shiftTo",
    "access": "public",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "getEmptyData",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess#getEmptyData",
    "access": "public",
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "resetDataSources",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess#resetDataSources",
    "access": "public",
    "description": null,
    "lineNumber": 357,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 45,
    "kind": "member",
    "name": "dataSources",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess#dataSources",
    "access": "public",
    "description": null,
    "lineNumber": 358,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "render",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~DataAccess#render",
    "access": "public",
    "description": null,
    "lineNumber": 368,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "class",
    "name": "Animation",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/LiveAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 374,
    "undocument": true,
    "decorators": [
      {
        "name": "withComponentMixins",
        "arguments": "([intervalAccessMixin()])"
      }
    ],
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 48,
    "kind": "member",
    "name": "propTypes",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 394,
    "undocument": true
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "state",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#state",
    "access": "public",
    "description": null,
    "lineNumber": 397,
    "undocument": true,
    "type": {
      "types": [
        "{\"status\": *, \"controls\": *, \"animationData\": *}"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "isRefreshing",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#isRefreshing",
    "access": "public",
    "description": null,
    "lineNumber": 405,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "refreshBound",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#refreshBound",
    "access": "public",
    "description": null,
    "lineNumber": 406,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 409,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "fetchStatusInterval",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#fetchStatusInterval",
    "access": "public",
    "description": null,
    "lineNumber": 412,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 426,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#componentWillUnmount",
    "access": "public",
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "masterReset",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#masterReset",
    "access": "public",
    "description": null,
    "lineNumber": 436,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "errorHandler",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#errorHandler",
    "access": "public",
    "description": null,
    "lineNumber": 449,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "getInitStatus",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#getInitStatus",
    "access": "public",
    "description": null,
    "lineNumber": 460,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "updateInterval",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#updateInterval",
    "access": "public",
    "description": null,
    "lineNumber": 473,
    "undocument": true,
    "params": [
      {
        "name": "currentPosition",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "handleNewStatus",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#handleNewStatus",
    "access": "public",
    "description": null,
    "lineNumber": 486,
    "undocument": true,
    "params": [
      {
        "name": "newStatus",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "setStatus",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#setStatus",
    "access": "public",
    "description": null,
    "lineNumber": 507,
    "undocument": true,
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "refresh",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 519,
    "undocument": true,
    "params": [
      {
        "name": "elapsedTs",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "savedInterval",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#savedInterval",
    "access": "public",
    "description": null,
    "lineNumber": 521,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "lastRefreshTs",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#lastRefreshTs",
    "access": "public",
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "nextFrameId",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#nextFrameId",
    "access": "public",
    "description": null,
    "lineNumber": 537,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "handlePlay",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#handlePlay",
    "access": "public",
    "description": null,
    "lineNumber": 540,
    "undocument": true,
    "params": [
      {
        "name": "nextStatus",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "handlePause",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#handlePause",
    "access": "public",
    "description": null,
    "lineNumber": 555,
    "undocument": true,
    "params": [
      {
        "name": "nextStatus",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "play",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#play",
    "access": "public",
    "description": null,
    "lineNumber": 566,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "pause",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#pause",
    "access": "public",
    "description": null,
    "lineNumber": 571,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "sendControlRequest",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#sendControlRequest",
    "access": "public",
    "description": null,
    "lineNumber": 577,
    "undocument": true,
    "decorators": [
      {
        "name": "withAsyncErrorHandler",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "controlName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "fetchStatus",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#fetchStatus",
    "access": "public",
    "description": null,
    "lineNumber": 587,
    "undocument": true,
    "decorators": [
      {
        "name": "withAsyncErrorHandler",
        "arguments": null
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "render",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~Animation#render",
    "access": "public",
    "description": null,
    "lineNumber": 597,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "LiveAnimation",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~LiveAnimation",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/ivis/LiveAnimation.js",
    "importStyle": "{LiveAnimation}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "propTypes",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~LiveAnimation",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~LiveAnimation.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~LiveAnimation",
    "static": true,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~LiveAnimation.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~LiveAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~LiveAnimation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "initialIntervalSpec",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~LiveAnimation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~LiveAnimation#initialIntervalSpec",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "render",
    "memberof": "ivis-core/client/src/ivis/LiveAnimation.js~LiveAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/LiveAnimation.js~LiveAnimation#render",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "ivis-core/client/src/ivis/RecordedAnimation.js",
    "content": "import React, {Component} from \"react\";\nimport {\n    AnimationStatusContext,\n    AnimationControlContext,\n    AnimationDataContext,\n} from \"./AnimationCommon\";\nimport {SigSetInterpolator} from \"../lib/animation-helpers\";\nimport {withAsyncErrorHandler} from \"../lib/error-handling\";\nimport {DataAccessSession} from \"./DataAccess\";\nimport {withComponentMixins} from \"../lib/decorator-helpers\";\nimport {intervalAccessMixin, TimeContext} from \"./TimeContext\";\nimport {IntervalSpec} from \"./TimeInterval\";\nimport {bisector} from \"d3-array\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\n\n\n//When the tab is inactive, requests for animation frames are slowed down to 1\n//or 2 per second. This means that we want to store at least 1s of keyframes\n//ahead of the current position.\nconst inactiveTabTimePillow = 1000;\n\nconst defaultMaxTimeFetched = 30000;\nconst defaultMaxKeyframesStored = 1000;\nconst defaultPlaybackSpeedAggFactor = 5;\n\nclass RecordedAnimation extends Component {\n    static propTypes = {\n        dataSources: PropTypes.object.isRequired,\n\n        initialIntervalSpec: PropTypes.object,\n        intervalConfigPath: PropTypes.arrayOf(PropTypes.string),\n        defaultGetMinAggregationInterval: PropTypes.func,\n\n        initialStatus: PropTypes.object,\n        children: PropTypes.node,\n    }\n\n    static defaultProps = {\n        initialIntervalSpec: new IntervalSpec('now-6d', 'now', null, null),\n        intervalConfigPath: ['animationTimeContext'],\n        initialStatus: {\n            isPlaying: false,\n            playbackSpeedFactor: 1,\n            position: null,\n        },\n    }\n\n    render() {\n        const childrenRender = (props) => {\n            return (\n                <Animation\n                    initialStatus={this.props.initialStatus}\n                    {...props}\n                >\n                    {this.props.children}\n                </Animation>\n            );\n        };\n\n        return (\n            <TimeContext\n                initialIntervalSpec={this.props.initialIntervalSpec}\n                configPath={this.props.intervalConfigPath}\n                getMinAggregationInterval={this.props.defaultGetMinAggregationInterval}\n            >\n\n                <AnimationDataAccess\n                    dataSources={this.props.dataSources}\n                    render={childrenRender}\n                />\n            </TimeContext>\n        );\n    }\n}\n\nclass GenericDataSource {\n    constructor(config, dataAccess) {\n        this.dataAccess = dataAccess;\n\n        this.conf = {\n            intpArity: config.interpolation.arity,\n            history: config.history || null,\n            playbackSpeedAggFactor: config.playbackSpeedAggFactor || defaultPlaybackSpeedAggFactor,\n\n            maxTimeStored: config.maxTimeStored || defaultMaxTimeFetched,\n            maxKeyframesStored: config.maxKeyframesStored || defaultMaxKeyframesStored,\n\n            getAggStep: config.useGlobalAggInterval ?\n                () => this.dataAccess.getIntervalAbsolute().aggregationInterval :\n                () => this.dataAccess.getPlaybackSpeedFactorBasedAggStep(this.conf.playbackSpeedAggFactor),\n            getAggOffset: step =>\n                moment.duration(this.dataAccess.getIntervalAbsolute().from.valueOf() % step.asMilliseconds()),\n\n        };\n\n        const signalAggs = config.signalAggs && config.signalAggs.length > 0 ?\n            config.signalAggs :\n            ['avg']\n        ;\n\n        this.sigSets = {};\n        for (const sigSetConf of config.sigSets) {\n            const signals = {};\n\n            for (const sigConf of sigSetConf.signals) {\n                signals[sigConf.cid] = signalAggs;\n            }\n\n            this.sigSets[sigSetConf.cid] = {\n                cid: sigSetConf.cid,\n                tsSigCid: sigSetConf.tsSigCid,\n                signals,\n                intp: new SigSetInterpolator(\n                    sigSetConf.signals.map(s => s.cid),\n                    signalAggs,\n                    config.interpolation\n                ),\n            };\n        }\n\n        this._reset();\n    }\n\n    getEmptyData() {\n        const data = {};\n        for (const sigSet of Object.values(this.sigSets)) {\n            data[sigSet.cid] = this.conf.history ? [] : sigSet.intp.interpolate(-1);\n        }\n\n        return data;\n    }\n    canShiftTo(ts) {\n        return Object.values(this.sigSets).every(sigSet =>\n            !sigSet.hasMoreData ||\n            (\n                sigSet.buffer.length >= this.conf.intpArity &&\n                sigSet.buffer[sigSet.buffer.length - 1].ts >= ts\n            )\n        );\n    }\n    didMissFetch() {\n        this.timePillowFactor *= 2;\n    }\n\n    shiftTo(ts) {\n        if (this.conf.history) {\n            const historyFirstTs = ts - this.conf.history;\n\n            for (const sigSet of Object.values(this.sigSets)) {\n                const historyLastTs = sigSet.history.length > 0 ?\n                    sigSet.history[sigSet.history.length - 1].ts : -1;\n\n                let i = sigSet.buffer.findIndex(kf => kf.ts > historyLastTs);\n                while (i >= 0 && i < sigSet.buffer.length && sigSet.buffer[i].ts < ts) {\n                    sigSet.history.push(sigSet.buffer[i]);\n                    i++;\n                }\n\n                const historyFirstIdx = bisector(kf => kf.ts).left(sigSet.history, historyFirstTs);\n                if (historyFirstIdx > 0) sigSet.history.splice(0, historyFirstIdx);\n            }\n        }\n\n        const arity = this.conf.intpArity;\n        const data = {};\n        for (const sigSet of Object.values(this.sigSets)) {\n            const needsShift = () => sigSet.buffer[arity - 1].ts < ts;\n\n            if (sigSet.buffer.length < arity ||\n                sigSet.buffer[sigSet.buffer.length - 1].ts < ts) {\n\n                sigSet.buffer = [];\n                sigSet.intp.clearArgs();\n\n                if (sigSet.intp.hasCachedArgs) {\n                    sigSet.intp.rebuildArgs(sigSet.buffer);\n                }\n            } else if (needsShift()) {\n                while(needsShift()) {\n                    const kfsToDelete = Math.min(\n                        sigSet.buffer.length - arity,\n                        arity - 1\n                    );\n\n                    sigSet.buffer.splice(0, kfsToDelete);\n                }\n\n                sigSet.intp.rebuildArgs(sigSet.buffer);\n            } else if (!sigSet.intp.hasCachedArgs) {\n                sigSet.intp.rebuildArgs(sigSet.buffer);\n            }\n\n            data[sigSet.cid] = this.conf.history ?\n                [...sigSet.history, {ts, data: sigSet.intp.interpolate(ts)}] :\n                sigSet.intp.interpolate(ts)\n            ;\n        }\n\n        return data;\n    }\n\n    getSeekQueries(ts) {\n        const queries = [];\n        for (const sigSet of Object.values(this.sigSets)) {\n            if (this.conf.history) {\n                queries.push(this._getHistoryQuery(sigSet, ts));\n            }\n\n            queries.push(this._getFirstKeyframeQuery(sigSet, ts));\n\n            const bucketCount = 3 * this.conf.intpArity;\n            queries.push(this._getNextChunkQuery(sigSet, ts, bucketCount));\n        }\n\n        return queries;\n    }\n    processSeekQueries(qryResults, queries) {\n        this._reset();\n\n        const qrysPerSigSet = this.conf.history ? 3 : 2;\n        for (const sigSet of Object.values(this.sigSets)) {\n            const sigSetQrys = queries.splice(0, qrysPerSigSet);\n            const sigSetQryResults = qryResults.splice(0, qrysPerSigSet);\n\n            if (this.conf.history) {\n                const historyQryBuckets = sigSetQryResults.shift()[0].buckets;\n                sigSet.history.push(\n                    ...historyQryBuckets.map(this._bucketToKeyframe)\n                );\n            }\n\n            const firstKeyframeQryBuckets = sigSetQryResults.shift()[0].buckets;\n            if (firstKeyframeQryBuckets.length > 0) {\n                const firstBucket = firstKeyframeQryBuckets[0];\n                sigSet.buffer.push(this._bucketToKeyframe(firstBucket));\n            }\n\n            const nextChunkQryBuckets = sigSetQryResults.shift()[0].buckets;\n\n            this._processNextChunkBuckets(\n                sigSet,\n                nextChunkQryBuckets,\n                sigSetQrys[qrysPerSigSet - 1]\n            );\n        }\n    }\n\n    getNextChunkQueries(maxPredictedFetchTime) {\n        const queries = [];\n        for (const sigSet of this._getSigSetsToFetch(maxPredictedFetchTime)) {\n            const buffLen = sigSet.buffer.length;\n\n            let timeStoredBucketLimit = Infinity;\n            if (buffLen > 1) {\n                const timeStored = sigSet.buffer[buffLen - 1].ts - sigSet.buffer[0].ts;\n                const realTimeStored = timeStored / this.dataAccess.playbackSpeedFactor;\n\n                const avgBucketCountPerMs = buffLen / realTimeStored;\n                timeStoredBucketLimit = Math.floor(\n                    (this.conf.maxTimeStored - realTimeStored) * avgBucketCountPerMs\n                );\n            }\n\n            const bucketCount = Math.min(\n                this.conf.maxKeyframesStored - buffLen,\n                timeStoredBucketLimit,\n                sigSet.lastBucketCount * 2\n            );\n\n            queries.push(this._getNextChunkQuery(\n                sigSet,\n                sigSet.nextChunkBeginTs,\n                bucketCount\n            ));\n        }\n\n        return queries;\n    }\n    processNextChunkQueries(qryResults, queries) {\n        const fetchedSigSetCids = queries.map(qry => qry.args[0]);\n        for (const sigSetCid of fetchedSigSetCids) {\n            const sigSet = this.sigSets[sigSetCid];\n            const sigSetQryBuckets = qryResults.shift()[0].buckets;\n            const sigSetQries = queries.shift();\n\n            this._processNextChunkBuckets(\n                sigSet,\n                sigSetQryBuckets,\n                sigSetQries\n            );\n        }\n    }\n\n    _reset() {\n        for (const sigSet of Object.values(this.sigSets)) {\n            sigSet.buffer = [];\n            sigSet.history = [];\n            sigSet.hasMoreData = true;\n\n            sigSet.intp.clearArgs();\n        }\n\n        this.timePillowFactor = 1;\n    }\n    _getSigSetsToFetch(maxPredictedFetchTime) {\n        const intpArity = this.conf.intpArity;\n        const speedFact = this.dataAccess.playbackSpeedFactor;\n        return Object.values(this.sigSets).filter(sigSet => {\n            //Leaving out the currently interpolated keyframes, because in the\n            //worst case scenario, the keyframe window is goint to shift next\n            //refresh.\n            const storedTime = sigSet.buffer.length <= intpArity ? 0 :\n                sigSet.buffer[sigSet.buffer.length - 1].ts - sigSet.buffer[intpArity - 1].ts\n            ;\n\n            return sigSet.hasMoreData &&\n                (storedTime - inactiveTabTimePillow) / speedFact <= this.timePillowFactor * maxPredictedFetchTime;\n        });\n    }\n\n    _processNextChunkBuckets(sigSet, buckets, nextChunkQry) {\n        //Due to aggregation intervals behaviour, we sometimes get a kf twice\n        const lastBufferTs = sigSet.buffer.length > 0 ? sigSet.buffer[sigSet.buffer.length - 1].ts : -1;\n        const kfs = buckets.map(this._bucketToKeyframe);\n        const firstKfIdx = kfs.findIndex(kf => kf.ts > lastBufferTs);\n\n        if (firstKfIdx >= 0) {\n            sigSet.buffer.push(...kfs.slice(firstKfIdx));\n        }\n\n        const qryAggs = nextChunkQry.args[2];\n        const wantedBucketCount = qryAggs[0].limit;\n\n        sigSet.hasMoreData = buckets.length === wantedBucketCount;\n        sigSet.lastBucketCount = buckets.length;\n\n        sigSet.nextChunkBeginTs = sigSet.buffer.length > 0 ?\n            sigSet.buffer[sigSet.buffer.length - 1].ts :\n            //If no buckets were fetched, there is no more data (or chunks)\n            null;\n    }\n    _bucketToKeyframe(bucket) {\n        return {\n            ts: Date.parse(bucket.key),\n            data: bucket.values,\n        };\n    }\n\n    _getNextChunkQuery(sigSet, beginTs, bucketCount) {\n        return {\n            type: \"aggs\",\n            args: [\n                sigSet.cid,\n                {\n                    type: \"range\",\n                    sigCid: sigSet.tsSigCid,\n                    gt: moment(beginTs).toISOString(),\n                },\n                this._getQueryAggs(sigSet, bucketCount, \"asc\")\n            ]\n        };\n    }\n    _getFirstKeyframeQuery(sigSet, beginTs) {\n        return {\n            type: \"aggs\",\n            args: [\n                sigSet.cid,\n                {\n                    type: \"range\",\n                    sigCid: sigSet.tsSigCid,\n                    lte: moment(beginTs).toISOString(),\n                },\n                this._getQueryAggs(sigSet, 1, \"desc\")\n            ]\n        };\n    }\n    _getHistoryQuery(sigSet, beginTs) {\n        const lt = moment(beginTs);\n        const gte = moment(lt.valueOf() - this.conf.history);\n\n        return {\n            type: \"aggs\",\n            args: [\n                sigSet.cid,\n                {\n                    type: \"range\",\n                    sigCid: sigSet.tsSigCid,\n                    lt: lt.toISOString(),\n                    gte: gte.toISOString(),\n                },\n                this._getQueryAggs(sigSet, null, 'asc')\n            ]\n        };\n    }\n\n    _getQueryAggs(sigSet, limit, order) {\n        const step = this.conf.getAggStep();\n        const offset = this.conf.getAggOffset(step);\n\n        return [\n            {\n                sigCid: sigSet.tsSigCid,\n                step: step.toString(),\n                offset: offset.toString(),\n                minDocCount: 1,\n                signals: sigSet.signals,\n                limit,\n                order,\n            }\n        ];\n    }\n}\n\nclass TimeSeriesDataSource {\n    constructor(config, dataAccess) {\n        this.dataAccess = dataAccess;\n\n        this.conf = {\n            intpArity: config.interpolation.arity,\n\n            getAggStep: () => this.dataAccess.getIntervalAbsolute().aggregationInterval,\n            getAggOffset: (aggStep) => moment.duration(\n                this.dataAccess.getIntervalAbsolute().from.valueOf() % aggStep.asMilliseconds()\n            ),\n        };\n\n        const signalAggs = config.signalAggs || ['avg'];\n\n        this.querySigSets = {};\n        this.sigSets = [];\n        for (const sigSetConf of config.sigSets) {\n            const signals = {};\n\n            for (const sigConf of sigSetConf.signals) {\n                if (sigConf.generate) {\n                    signals[sigConf.cid] = {\n                        generate: sigConf.generate,\n                    };\n                } else if (sigConf.mutate) {\n                    signals[sigConf.cid] = {\n                        mutate: sigConf.mutate,\n                        aggs: signalAggs,\n                    };\n                } else {\n                    signals[sigConf.cid] = signalAggs;\n                }\n            }\n\n            this.querySigSets[sigSetConf.cid] = {\n                tsSigCid: sigSetConf.tsSigCid,\n                signals\n            };\n\n            this.sigSets.push({\n                cid: sigSetConf.cid,\n                intp: new SigSetInterpolator(\n                    sigSetConf.signals.map(s => s.cid),\n                    signalAggs,\n                    config.interpolation\n                ),\n            });\n        }\n\n        this._reset();\n    }\n\n    _reset() {\n        this.lastSeekInterval = null;\n\n        for (const sigSet of this.sigSets) {\n            sigSet.data = {};\n            sigSet.startIdx = 0;\n\n            sigSet.intp.clearArgs();\n        }\n    }\n\n    canShiftTo() {\n        return true;\n    }\n\n    shiftTo(ts) {\n        const data = {};\n        const arity = this.conf.intpArity;\n        for (const sigSet of this.sigSets) {\n            const main = sigSet.data.main;\n\n            if (main.length === 0 || ts < main[0].ts.valueOf()) {\n                const shiftedData = {main: []};\n\n                if (sigSet.data.prev && sigSet.data.prev.ts.valueOf() > ts) {\n                    shiftedData.prev = sigSet.data.prev;\n                }\n\n                data[sigSet.cid] = shiftedData;\n                continue;\n            }\n\n            if (ts >= main[main.length - 1].ts.valueOf()) {\n                const shiftedData = { main };\n\n                if (sigSet.data.prev) shiftedData.prev = sigSet.data.prev;\n                if (sigSet.data.next) shiftedData.next = sigSet.data.next;\n\n                data[sigSet.cid] = shiftedData;\n                continue;\n            }\n\n            const needsShift = () => main[sigSet.startIdx + arity - 1].ts.valueOf() < ts;\n            if (needsShift()) {\n                while (needsShift()) {\n                    sigSet.startIdx = Math.min(\n                        main.length - arity,\n                        sigSet.startIdx + arity - 1\n                    );\n                }\n\n                sigSet.intp.rebuildArgs(main, sigSet.startIdx);\n            } else if (!sigSet.intp.hasCachedArgs) {\n                sigSet.intp.rebuildArgs(main, sigSet.startIdx);\n            }\n\n            const shiftedData = {\n                main: main.slice(0, sigSet.startIdx + 1),\n            };\n\n            shiftedData.main.push({ts: moment(ts), data: sigSet.intp.interpolate(ts)});\n\n            if (sigSet.data.prev) shiftedData.prev = sigSet.data.prev;\n\n            data[sigSet.cid] = shiftedData;\n        }\n\n        return data;\n    }\n\n    getEmptyData() {\n        const emptyData = {};\n        for (const sigSet of this.sigSets) {\n            emptyData[sigSet.cid] = { main: [] };\n        }\n\n        return emptyData;\n    }\n\n    didMissFetch() {}\n    getSeekQueries(ts) {\n        this.lastSeekTo = ts;\n        const intvAbs = this.dataAccess.getIntervalAbsolute();\n\n        const sameAggregationInterval = () => {\n            const prev = this.lastSeekInterval.aggregationInterval;\n            const curr = intvAbs.aggregationInterval;\n\n            return (prev === null && curr === null) ||\n                (prev !== null && curr !== null && prev.asMilliseconds() === curr.asMilliseconds());\n        };\n\n        if (this.lastSeekInterval &&\n            this.lastSeekInterval.from === intvAbs.from.valueOf() &&\n            this.lastSeekInterval.to === intvAbs.to.valueOf() &&\n            sameAggregationInterval()) {\n\n            return [];\n        }\n\n        const queries = [\n            {\n                type: \"timeSeries\",\n                args: [ this.querySigSets, intvAbs ]\n            }\n        ];\n\n        return queries;\n    }\n    processSeekQueries(qryResults, queries) {\n        if (qryResults.length !== 0) {\n\n            this._reset();\n\n            const intvAbs = queries[0].args[1];\n            this.lastSeekInterval = {\n                from: intvAbs.from.valueOf(),\n                to: intvAbs.to.valueOf(),\n                aggregationInterval: intvAbs.aggregationInterval\n            };\n\n            for (const sigSet of this.sigSets) {\n                sigSet.data = qryResults[0][sigSet.cid];\n            }\n        } else {\n            for (const sigSet of this.sigSets) {\n                sigSet.intp.clearArgs();\n\n                sigSet.startIdx = Math.min(\n                    Math.max(0, sigSet.data.main.findIndex(kf => kf.ts.valueOf() > this.lastSeekTo)),\n                    sigSet.data.main.length - this.conf.intpArity\n                );\n            }\n        }\n    }\n\n    getNextChunkQueries() {\n        return [];\n    }\n    processNextChunkQueries() {}\n}\n\nconst dataSources = {\n    generic: GenericDataSource,\n    timeSeries: TimeSeriesDataSource,\n};\n\n@withComponentMixins([intervalAccessMixin()])\nclass AnimationDataAccess extends Component {\n    static propTypes = {\n        dataSources: PropTypes.object.isRequired,\n        render: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            seek: ::this.seek,\n            refreshTo: ::this.refreshTo,\n            setPlaybackSpeedFactor: ::this.setPlaybackSpeedFactor,\n            getEmptyData: ::this.getEmptyData,\n\n            fetchError: null,\n            needsReseek: false,\n        };\n\n        this.maxFetchTime = 0;\n\n        this.runNextChunkQueries = (dtSrcKeys) => this.runQueries(dtSrcKeys, \"getNextChunkQueries\", [this.maxFetchTime], \"processNextChunkQueries\");\n        this.reset();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!_.isEqual(this.props.dataSources, prevProps.dataSources)) {\n            this.reset();\n            this.setState({needsReseek: true});\n        }\n    }\n\n    async seek(ts) {\n        if (this.state.needsReseek) this.setState({needsReseek: false});\n\n        const wasLatestFetch = await this.runQueries(Object.keys(this.dataSources), \"getSeekQueries\", [ts], \"processSeekQueries\");\n\n        if (!wasLatestFetch) return null;\n\n        return this.shiftTo(ts);\n    }\n\n    refreshTo(ts) {\n        if (this.state.needsReseek) return {data: null};\n\n        const dataSourcesToFetch = Object.keys(this.dataSources).filter(dataSrcKey => !this.dataSources[dataSrcKey].canShiftTo(ts));\n\n        if (dataSourcesToFetch.length === 0) {\n            if (!this.nextFetchPromise) {\n                this.runNextChunkQueries(Object.keys(this.dataSources));\n            }\n\n            return {data: this.shiftTo(ts)};\n        }\n\n        //Needs to fetch, but one is already under way.\n        if (this.nextFetchPromise) return {data: null};\n\n        dataSourcesToFetch.map(dtSrcKey => this.dataSources[dtSrcKey].didMissFetch());\n        this.runNextChunkQueries(dataSourcesToFetch);\n        const promise = this.nextFetchPromise.then(wasLatestFetch => {\n            if (!wasLatestFetch || this.state.needsReseek) return null;\n\n            return this.shiftTo(ts);\n        });\n\n        return {promise};\n    }\n\n    setPlaybackSpeedFactor(factor) {\n        this.playbackSpeedFactor = factor;\n    }\n\n    getEmptyData() {\n        const emptDt = {};\n        for (const dtSrcKey of Object.keys(this.dataSources)) {\n            emptDt[dtSrcKey] = this.dataSources[dtSrcKey].getEmptyData();\n        }\n\n        return emptDt;\n    }\n\n\n    @withAsyncErrorHandler\n    async runQueries(dataSrcKeys, getQueriesFuncName, getQueriesFuncArgs, processQueriesFuncName) {\n        const _runQueries = async () => {\n            const lengths = [];\n            const querySetOwners = [];\n            const queries = [];\n\n            for (const dataSrcKey of dataSrcKeys) {\n                const querySet = this.dataSources[dataSrcKey][getQueriesFuncName](...getQueriesFuncArgs);\n\n                queries.push(...querySet);\n                lengths.push(querySet.length);\n                querySetOwners.push(dataSrcKey);\n            }\n\n            if (queries.length == 0) return true;\n\n            const results = await this.dataAccSession.getLatestMixed(queries);\n\n            if (results === null) return false;\n\n            for (let i = 0; i < querySetOwners.length; i++) {\n                const owner = this.dataSources[querySetOwners[i]];\n                const querySetLength = lengths[i];\n                const resultSet = results.splice(0, querySetLength);\n                const querySet = queries.splice(0, querySetLength);\n\n                owner[processQueriesFuncName](resultSet, querySet);\n            }\n\n            return true;\n        };\n\n        this.nextFetchPromise = _runQueries();\n        const beforeFetchTs = performance.now();\n\n        const wasLatestFetch = await this.nextFetchPromise;\n\n        this.nextFetchPromise = null;\n        this.maxFetchTime = Math.max(this.maxFetchTime, performance.now() - beforeFetchTs);\n\n        return wasLatestFetch;\n    }\n    shiftTo(ts) {\n        const data = {};\n\n        for (const dataSrcKey of Object.keys(this.dataSources)) {\n            data[dataSrcKey] = this.dataSources[dataSrcKey].shiftTo(ts);\n        }\n\n        return data;\n    }\n\n    errorHandler(error) {\n        this.setState({fetchError: error, needsReseek: true});\n\n        return true;\n    }\n    getPlaybackSpeedFactorBasedAggStep(minFramesPerKeyframe) {\n        //requestAnimationFrame has variable refresh interval, which should\n        //match the refresh interval of the screen --- usually 60 FPS.\n        return moment.duration(minFramesPerKeyframe * 1000/60 * this.playbackSpeedFactor);\n    }\n\n    reset() {\n        this.dataAccSession = new DataAccessSession();\n        this.nextFetchPromise = null;\n\n        this.dataSources = {};\n        for (const dataSrcKey of Object.keys(this.props.dataSources)) {\n            const config = this.props.dataSources[dataSrcKey];\n            const DataSourceType = dataSources[config.type] || \"generic\";\n\n            this.dataSources[dataSrcKey] = new DataSourceType(config, this);\n        }\n    }\n\n    render() {\n        return this.props.render({...this.state});\n    }\n}\n\n@withComponentMixins([intervalAccessMixin()])\nclass Animation extends Component {\n    static propTypes = {\n        initialStatus: PropTypes.object.isRequired,\n\n        seek: PropTypes.func.isRequired,\n        refreshTo: PropTypes.func.isRequired,\n        setPlaybackSpeedFactor: PropTypes.func.isRequired,\n        getEmptyData: PropTypes.func.isRequired,\n        needsReseek: PropTypes.bool,\n        fetchError: PropTypes.object,\n\n        children: PropTypes.node,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            status: this.resetStatus(false),\n            controls: {\n                play: ::this.playHandler,\n                pause: ::this.pauseHandler,\n                seek: ::this.seekHandler,\n                stop: ::this.stopHandler,\n                jumpForward: ::this.jumpForwardHandler,\n                jumpBackward: ::this.jumpBackwardHandler,\n                changeSpeed: ::this.changePlaybackSpeedHandler,\n            },\n            animationData: props.getEmptyData(),\n        };\n\n        this.nextFrameId = null;\n        this.refreshBound = ::this.refresh;\n        this.errorHandlerBound = ::this.errorHandler;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.fetchError && !prevProps.fetchError) {\n            this.errorHandler(this.props.fetchError);\n            return;\n        }\n\n        const prevIntvSpec = this.getIntervalSpec(prevProps);\n        const currIntvSpec = this.getIntervalSpec();\n        const sameIntv = prevIntvSpec.from === currIntvSpec.from && prevIntvSpec.to === currIntvSpec.to;\n        if (!sameIntv) {\n            this.seekHandler(this.getIntervalAbsolute().from.valueOf());\n        } else if (this.props.needsReseek && !prevProps.needsReseek) {\n            this.seekHandler(this.state.status.position);\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopRefreshing();\n    }\n\n    componentDidMount() {\n        this.changePlaybackSpeedHandler(this.state.status.playbackSpeedFactor);\n        this.seekHandler(this.state.status.position);\n\n        if (this.state.status.isPlaying) this.playHandler();\n    }\n\n    resetStatus(withUpdate) {\n        const is = this.props.initialStatus;\n        const startingPos = is.position !== null && !Number.isNaN(is.position) ?\n            this.clampPos(is.position) :\n            this.getIntervalAbsolute().from.valueOf();\n\n        let speedFactor = is.playbackSpeedFactor;\n        if (speedFactor == undefined || Number.isNaN(speedFactor) || speedFactor <= 0) {\n            speedFactor = 1;\n        }\n\n\n        const newStatus = {\n            isBuffering: true,\n            isPlaying: is.isPlaying,\n            playbackSpeedFactor: speedFactor,\n            position: startingPos,\n        };\n\n        if (withUpdate) {\n            this.changePlaybackSpeedHandler(newStatus.playbackSpeedFactor);\n            this.seekHandler(newStatus.position);\n\n            if (newStatus.isPlaying) this.playHandler();\n        }\n\n        return newStatus;\n    }\n\n    clampPos(pos) {\n        const minPosition = this.getIntervalAbsolute().from.valueOf();\n        const maxPosition = this.getIntervalAbsolute().to.valueOf();\n        return Math.min(maxPosition, Math.max(minPosition, pos));\n    }\n\n\n    errorHandler(error) {\n        console.error(error);\n\n        this.stopRefreshing();\n        this.setState({controls: {}});\n        this.setStatus({error});\n\n        return true;\n    }\n\n    playHandler() {\n        this.startRefreshing();\n        this.setStatus({isPlaying: true});\n    }\n\n    pauseHandler() {\n        this.stopRefreshing();\n        this.setStatus({isPlaying: false});\n    }\n\n    stopHandler() {\n        if (this.state.status.isPlaying) this.pauseHandler();\n        this.seekHandler(this.getIntervalAbsolute().from.valueOf());\n    }\n\n    jumpForwardHandler(shiftMs) {\n        this.seekHandler(this.state.status.position + shiftMs);\n    }\n\n    jumpBackwardHandler(shiftMs) {\n        this.seekHandler(this.state.status.position - shiftMs);\n    }\n\n    changePlaybackSpeedHandler(factor) {\n        this.props.setPlaybackSpeedFactor(factor);\n        this.setStatus({playbackSpeedFactor: factor});\n    }\n\n    @withAsyncErrorHandler\n    async seekHandler(ts) {\n        const clampedTs = this.clampPos(ts);\n\n        this.setStatus({position: clampedTs, isBuffering: true});\n\n        const animData = await this.props.seek(clampedTs);\n\n        if (animData !== null) {\n            this.setState({animationData: animData});\n            this.setStatus({isBuffering: this.state.status.isPlaying});\n        }\n    }\n\n    refresh(msSinceOrigin) {\n        const interval = this.savedInterval || msSinceOrigin - this.lastRefreshTs;\n        this.savedInterval = null;\n        this.lastRefreshTs = performance.now();\n\n        const endPosition = this.getIntervalAbsolute().to.valueOf();\n        const nextPosition = Math.min(\n            endPosition,\n            this.state.status.position + (this.state.status.playbackSpeedFactor * interval)\n        );\n\n        const {data, promise} = this.props.refreshTo(nextPosition);\n\n        if (!data) {\n            if (!this.state.status.isBuffering)\n                this.setStatus({isBuffering: true});\n\n            this.savedInterval = interval;\n            this.nextFrameId = requestAnimationFrame(this.refreshBound);\n\n            if (promise) {\n                const position = this.state.status.position;\n                promise.then(data => {\n                    if (data && this.state.status.position === position) {\n                        this.setState({animationData: data});\n                    }\n                }).catch(this.errorHandlerBound);\n            }\n\n            return;\n        }\n\n        this.setState(state => {\n            const nextStatus = Object.assign({}, state.status, {isBuffering: false, position: nextPosition});\n            return {status: nextStatus, animationData: data};\n        });\n\n\n        if (nextPosition !== endPosition) {\n            this.nextFrameId = requestAnimationFrame(this.refreshBound);\n        } else {\n            this.pauseHandler();\n        }\n    }\n\n    startRefreshing() {\n        if (this.isRefreshing) return;\n        this.isRefreshing = true;\n\n        this.lastRefreshTs = performance.now();\n        this.nextFrameId = requestAnimationFrame(this.refreshBound);\n    }\n\n    scheduleRefresh() {\n    }\n\n    stopRefreshing() {\n        this.isRefreshing = false;\n        cancelAnimationFrame(this.nextFrameId);\n    }\n\n    setStatus(nextStatus) {\n        this.setState(prevState => {\n            const newStatus = Object.assign({}, prevState.status, nextStatus);\n\n            return {status: newStatus};\n        });\n    }\n\n    render() {\n        return (\n            <AnimationStatusContext.Provider value={this.state.status}>\n                <AnimationControlContext.Provider value={this.state.controls}>\n                    <AnimationDataContext.Provider value={this.state.animationData}>\n                        {this.props.children}\n                    </AnimationDataContext.Provider>\n                </AnimationControlContext.Provider>\n            </AnimationStatusContext.Provider>\n        );\n    }\n}\n\nexport {\n    RecordedAnimation\n};\n",
    "static": true,
    "longname": "/home/dburian/Documents/bak/ivis-core/client/src/ivis/RecordedAnimation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "inactiveTabTimePillow",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~inactiveTabTimePillow",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/RecordedAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "defaultMaxTimeFetched",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~defaultMaxTimeFetched",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/RecordedAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "defaultMaxKeyframesStored",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~defaultMaxKeyframesStored",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/RecordedAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "defaultPlaybackSpeedAggFactor",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~defaultPlaybackSpeedAggFactor",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/RecordedAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "GenericDataSource",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/RecordedAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "dataAccess",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#dataAccess",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "conf",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#conf",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "{\"intpArity\": *, \"history\": *, \"playbackSpeedAggFactor\": *, \"maxTimeStored\": *, \"maxKeyframesStored\": *, \"getAggStep\": *, \"getAggOffset\": *}"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "sigSets",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#sigSets",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "getEmptyData",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#getEmptyData",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "canShiftTo",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#canShiftTo",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "didMissFetch",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#didMissFetch",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "timePillowFactor",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#timePillowFactor",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "shiftTo",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#shiftTo",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "getSeekQueries",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#getSeekQueries",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "processSeekQueries",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#processSeekQueries",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "params": [
      {
        "name": "qryResults",
        "types": [
          "*"
        ]
      },
      {
        "name": "queries",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "getNextChunkQueries",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#getNextChunkQueries",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "params": [
      {
        "name": "maxPredictedFetchTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "processNextChunkQueries",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#processNextChunkQueries",
    "access": "public",
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "params": [
      {
        "name": "qryResults",
        "types": [
          "*"
        ]
      },
      {
        "name": "queries",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "_reset",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#_reset",
    "access": "private",
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "_getSigSetsToFetch",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#_getSigSetsToFetch",
    "access": "private",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "params": [
      {
        "name": "maxPredictedFetchTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "_processNextChunkBuckets",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#_processNextChunkBuckets",
    "access": "private",
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "params": [
      {
        "name": "sigSet",
        "types": [
          "*"
        ]
      },
      {
        "name": "buckets",
        "types": [
          "*"
        ]
      },
      {
        "name": "nextChunkQry",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "_bucketToKeyframe",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#_bucketToKeyframe",
    "access": "private",
    "description": null,
    "lineNumber": 344,
    "undocument": true,
    "params": [
      {
        "name": "bucket",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"ts\": *, \"data\": *}"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "_getNextChunkQuery",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#_getNextChunkQuery",
    "access": "private",
    "description": null,
    "lineNumber": 351,
    "undocument": true,
    "params": [
      {
        "name": "sigSet",
        "types": [
          "*"
        ]
      },
      {
        "name": "beginTs",
        "types": [
          "*"
        ]
      },
      {
        "name": "bucketCount",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": string, \"args\": *}"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "_getFirstKeyframeQuery",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#_getFirstKeyframeQuery",
    "access": "private",
    "description": null,
    "lineNumber": 365,
    "undocument": true,
    "params": [
      {
        "name": "sigSet",
        "types": [
          "*"
        ]
      },
      {
        "name": "beginTs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": string, \"args\": *}"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "_getHistoryQuery",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#_getHistoryQuery",
    "access": "private",
    "description": null,
    "lineNumber": 379,
    "undocument": true,
    "params": [
      {
        "name": "sigSet",
        "types": [
          "*"
        ]
      },
      {
        "name": "beginTs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": string, \"args\": *}"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "_getQueryAggs",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~GenericDataSource#_getQueryAggs",
    "access": "private",
    "description": null,
    "lineNumber": 398,
    "undocument": true,
    "params": [
      {
        "name": "sigSet",
        "types": [
          "*"
        ]
      },
      {
        "name": "limit",
        "types": [
          "*"
        ]
      },
      {
        "name": "order",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "TimeSeriesDataSource",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/RecordedAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 416,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 115,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 417,
    "undocument": true
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "dataAccess",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#dataAccess",
    "access": "public",
    "description": null,
    "lineNumber": 418,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "conf",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#conf",
    "access": "public",
    "description": null,
    "lineNumber": 420,
    "undocument": true,
    "type": {
      "types": [
        "{\"intpArity\": *, \"getAggStep\": *, \"getAggOffset\": *}"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "querySigSets",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#querySigSets",
    "access": "public",
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "sigSets",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#sigSets",
    "access": "public",
    "description": null,
    "lineNumber": 432,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "_reset",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#_reset",
    "access": "private",
    "description": null,
    "lineNumber": 469,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "lastSeekInterval",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#lastSeekInterval",
    "access": "public",
    "description": null,
    "lineNumber": 470,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "canShiftTo",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#canShiftTo",
    "access": "public",
    "description": null,
    "lineNumber": 480,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "shiftTo",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#shiftTo",
    "access": "public",
    "description": null,
    "lineNumber": 484,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "getEmptyData",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#getEmptyData",
    "access": "public",
    "description": null,
    "lineNumber": 539,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "didMissFetch",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#didMissFetch",
    "access": "public",
    "description": null,
    "lineNumber": 548,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "getSeekQueries",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#getSeekQueries",
    "access": "public",
    "description": null,
    "lineNumber": 549,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "lastSeekTo",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#lastSeekTo",
    "access": "public",
    "description": null,
    "lineNumber": 550,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "processSeekQueries",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#processSeekQueries",
    "access": "public",
    "description": null,
    "lineNumber": 578,
    "undocument": true,
    "params": [
      {
        "name": "qryResults",
        "types": [
          "*"
        ]
      },
      {
        "name": "queries",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "getNextChunkQueries",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#getNextChunkQueries",
    "access": "public",
    "description": null,
    "lineNumber": 605,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "processNextChunkQueries",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~TimeSeriesDataSource#processNextChunkQueries",
    "access": "public",
    "description": null,
    "lineNumber": 608,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "dataSources",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~dataSources",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/RecordedAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 611,
    "undocument": true,
    "type": {
      "types": [
        "{\"generic\": *, \"timeSeries\": *}"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "class",
    "name": "AnimationDataAccess",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/RecordedAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 617,
    "undocument": true,
    "decorators": [
      {
        "name": "withComponentMixins",
        "arguments": "([intervalAccessMixin()])"
      }
    ],
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "propTypes",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 618,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 623,
    "undocument": true
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "state",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#state",
    "access": "public",
    "description": null,
    "lineNumber": 626,
    "undocument": true,
    "type": {
      "types": [
        "{\"seek\": *, \"refreshTo\": *, \"setPlaybackSpeedFactor\": *, \"getEmptyData\": *, \"fetchError\": *, \"needsReseek\": *}"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "maxFetchTime",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#maxFetchTime",
    "access": "public",
    "description": null,
    "lineNumber": 636,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "runNextChunkQueries",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#runNextChunkQueries",
    "access": "public",
    "description": null,
    "lineNumber": 638,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 642,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "seek",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#seek",
    "access": "public",
    "description": null,
    "lineNumber": 649,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "refreshTo",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#refreshTo",
    "access": "public",
    "description": null,
    "lineNumber": 659,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"promise\": *}"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "setPlaybackSpeedFactor",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#setPlaybackSpeedFactor",
    "access": "public",
    "description": null,
    "lineNumber": 686,
    "undocument": true,
    "params": [
      {
        "name": "factor",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "playbackSpeedFactor",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#playbackSpeedFactor",
    "access": "public",
    "description": null,
    "lineNumber": 687,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "getEmptyData",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#getEmptyData",
    "access": "public",
    "description": null,
    "lineNumber": 690,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "runQueries",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#runQueries",
    "access": "public",
    "description": null,
    "lineNumber": 701,
    "undocument": true,
    "decorators": [
      {
        "name": "withAsyncErrorHandler",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "dataSrcKeys",
        "types": [
          "*"
        ]
      },
      {
        "name": "getQueriesFuncName",
        "types": [
          "*"
        ]
      },
      {
        "name": "getQueriesFuncArgs",
        "types": [
          "*"
        ]
      },
      {
        "name": "processQueriesFuncName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "nextFetchPromise",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#nextFetchPromise",
    "access": "public",
    "description": null,
    "lineNumber": 733,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "shiftTo",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#shiftTo",
    "access": "public",
    "description": null,
    "lineNumber": 743,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "errorHandler",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#errorHandler",
    "access": "public",
    "description": null,
    "lineNumber": 753,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "getPlaybackSpeedFactorBasedAggStep",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#getPlaybackSpeedFactorBasedAggStep",
    "access": "public",
    "description": null,
    "lineNumber": 758,
    "undocument": true,
    "params": [
      {
        "name": "minFramesPerKeyframe",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "reset",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#reset",
    "access": "public",
    "description": null,
    "lineNumber": 764,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "dataAccSession",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#dataAccSession",
    "access": "public",
    "description": null,
    "lineNumber": 765,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "dataSources",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#dataSources",
    "access": "public",
    "description": null,
    "lineNumber": 768,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "render",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~AnimationDataAccess#render",
    "access": "public",
    "description": null,
    "lineNumber": 777,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "class",
    "name": "Animation",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/ivis/RecordedAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 783,
    "undocument": true,
    "decorators": [
      {
        "name": "withComponentMixins",
        "arguments": "([intervalAccessMixin()])"
      }
    ],
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "propTypes",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 784,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 797,
    "undocument": true
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "state",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#state",
    "access": "public",
    "description": null,
    "lineNumber": 800,
    "undocument": true,
    "type": {
      "types": [
        "{\"status\": *, \"controls\": *, \"animationData\": *}"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "nextFrameId",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#nextFrameId",
    "access": "public",
    "description": null,
    "lineNumber": 814,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "refreshBound",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#refreshBound",
    "access": "public",
    "description": null,
    "lineNumber": 815,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "errorHandlerBound",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#errorHandlerBound",
    "access": "public",
    "description": null,
    "lineNumber": 816,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 819,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#componentWillUnmount",
    "access": "public",
    "description": null,
    "lineNumber": 835,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 839,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "resetStatus",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#resetStatus",
    "access": "public",
    "description": null,
    "lineNumber": 846,
    "undocument": true,
    "params": [
      {
        "name": "withUpdate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "clampPos",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#clampPos",
    "access": "public",
    "description": null,
    "lineNumber": 875,
    "undocument": true,
    "params": [
      {
        "name": "pos",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "errorHandler",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#errorHandler",
    "access": "public",
    "description": null,
    "lineNumber": 882,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "playHandler",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#playHandler",
    "access": "public",
    "description": null,
    "lineNumber": 892,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "pauseHandler",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#pauseHandler",
    "access": "public",
    "description": null,
    "lineNumber": 897,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "stopHandler",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#stopHandler",
    "access": "public",
    "description": null,
    "lineNumber": 902,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "jumpForwardHandler",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#jumpForwardHandler",
    "access": "public",
    "description": null,
    "lineNumber": 907,
    "undocument": true,
    "params": [
      {
        "name": "shiftMs",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "jumpBackwardHandler",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#jumpBackwardHandler",
    "access": "public",
    "description": null,
    "lineNumber": 911,
    "undocument": true,
    "params": [
      {
        "name": "shiftMs",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "changePlaybackSpeedHandler",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#changePlaybackSpeedHandler",
    "access": "public",
    "description": null,
    "lineNumber": 915,
    "undocument": true,
    "params": [
      {
        "name": "factor",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "seekHandler",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#seekHandler",
    "access": "public",
    "description": null,
    "lineNumber": 921,
    "undocument": true,
    "decorators": [
      {
        "name": "withAsyncErrorHandler",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "refresh",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 934,
    "undocument": true,
    "params": [
      {
        "name": "msSinceOrigin",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "savedInterval",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#savedInterval",
    "access": "public",
    "description": null,
    "lineNumber": 936,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "lastRefreshTs",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#lastRefreshTs",
    "access": "public",
    "description": null,
    "lineNumber": 937,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "startRefreshing",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#startRefreshing",
    "access": "public",
    "description": null,
    "lineNumber": 979,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "isRefreshing",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#isRefreshing",
    "access": "public",
    "description": null,
    "lineNumber": 981,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "scheduleRefresh",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#scheduleRefresh",
    "access": "public",
    "description": null,
    "lineNumber": 987,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "stopRefreshing",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#stopRefreshing",
    "access": "public",
    "description": null,
    "lineNumber": 990,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "setStatus",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#setStatus",
    "access": "public",
    "description": null,
    "lineNumber": 995,
    "undocument": true,
    "params": [
      {
        "name": "nextStatus",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "render",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~Animation#render",
    "access": "public",
    "description": null,
    "lineNumber": 1003,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "class",
    "name": "RecordedAnimation",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~RecordedAnimation",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/ivis/RecordedAnimation.js",
    "importStyle": "{RecordedAnimation}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "propTypes",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~RecordedAnimation",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~RecordedAnimation.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~RecordedAnimation",
    "static": true,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~RecordedAnimation.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "render",
    "memberof": "ivis-core/client/src/ivis/RecordedAnimation.js~RecordedAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/ivis/RecordedAnimation.js~RecordedAnimation#render",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "ivis-core/client/src/lib/animation-helpers.js",
    "content": "import moment from \"moment\";\n\nexport class SigSetInterpolator {\n    constructor(signalCids, aggs, intp) {\n        this.signalCids = signalCids;\n        this.aggs = aggs;\n        this.func = intp.func;\n        this.arity = intp.arity;\n\n        this.clearArgs();\n    }\n\n    rebuildArgs(keyframes, startIdx = 0) {\n        this.clearArgs();\n        const adjArity = startIdx + this.arity;\n\n        if (keyframes.length < adjArity) return;\n        const getArgsForAgg = (sigCid, agg) => {\n            const args = [];\n            for (let i = startIdx; i < adjArity; i++) {\n                args.push(keyframes[i].data[sigCid][agg]);\n            }\n\n            return args;\n        };\n\n        for (const sigCid of this.signalCids) {\n            const signalArgs = {};\n            for (const agg of this.aggs) {\n                signalArgs[agg] = getArgsForAgg(sigCid, agg);\n            }\n\n            this.dataArgs[sigCid] = signalArgs;\n        }\n\n        this.tsArgs = [];\n        for (let i = startIdx; i < adjArity; i++) {\n            const ts = keyframes[i].ts;\n            this.tsArgs.push(moment.isMoment(ts) ? ts.valueOf() : ts);\n        }\n\n        this.hasCachedArgs = true;\n    }\n\n    interpolate(ts) {\n        let forceNull = !this.hasCachedArgs ||\n            this.tsArgs[0] > ts || this.tsArgs[this.tsArgs.length - 1] < ts;\n\n        const interpolateAgg = (sigCid, agg) => forceNull ? null : this.func(this.tsArgs, this.dataArgs[sigCid][agg], ts);\n\n        for (const sigCid of this.signalCids) {\n            const sigResults = {};\n            for (const agg of this.aggs) {\n                sigResults[agg] = interpolateAgg(sigCid, agg);\n            }\n\n            this.results[sigCid] = sigResults;\n        }\n\n        return this.results;\n    }\n\n    clearArgs() {\n        this.dataArgs = {};\n        this.tsArgs = [];\n\n        this.results = {};\n        this.hasCachedArgs = false;\n    }\n}\n",
    "static": true,
    "longname": "/home/dburian/Documents/bak/ivis-core/client/src/lib/animation-helpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "SigSetInterpolator",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js",
    "static": true,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/lib/animation-helpers.js",
    "importStyle": "{SigSetInterpolator}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "signalCids",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#signalCids",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "aggs",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#aggs",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "func",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#func",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "arity",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#arity",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "rebuildArgs",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#rebuildArgs",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "keyframes",
        "types": [
          "*"
        ]
      },
      {
        "name": "startIdx",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "tsArgs",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#tsArgs",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "hasCachedArgs",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#hasCachedArgs",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "interpolate",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#interpolate",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "clearArgs",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#clearArgs",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "dataArgs",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#dataArgs",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "results",
    "memberof": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator",
    "static": false,
    "longname": "ivis-core/client/src/lib/animation-helpers.js~SigSetInterpolator#results",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "ivis-core/client/src/lib/animation-interpolations.js",
    "content": "import Spline from \"cubic-spline\";\nimport memoize from \"memoizee/weak\";\n\nfunction linearIntpFunction(xs, ys, x) {\n    const ratio = (xs[1] - x)/(xs[1] - xs[0]);\n\n    return ys[0] * ratio + ys[1] * (1 - ratio);\n}\n\nexport const linearInterpolation = {\n    arity: 2,\n    func: linearIntpFunction,\n};\n\nfunction getCubicSpline(xs, ys) {\n    return new Spline(xs, ys);\n}\n\nconst getCubicSplineMemoized = memoize(getCubicSpline);\n\nfunction cubicSplineIntpFunction(xs, ys, x) {\n    return getCubicSplineMemoized(xs, ys).at(x);\n}\n\nexport const cubicInterpolation = {\n    arity: 3,\n    func: cubicSplineIntpFunction,\n};\n\nexport const expensiveCubicInterpolation = {\n    arity: 10,\n    func: cubicSplineIntpFunction,\n};\n\n",
    "static": true,
    "longname": "/home/dburian/Documents/bak/ivis-core/client/src/lib/animation-interpolations.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "linearIntpFunction",
    "memberof": "ivis-core/client/src/lib/animation-interpolations.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ivis-core/client/src/lib/animation-interpolations.js~linearIntpFunction",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/lib/animation-interpolations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "xs",
        "types": [
          "*"
        ]
      },
      {
        "name": "ys",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "linearInterpolation",
    "memberof": "ivis-core/client/src/lib/animation-interpolations.js",
    "static": true,
    "longname": "ivis-core/client/src/lib/animation-interpolations.js~linearInterpolation",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/lib/animation-interpolations.js",
    "importStyle": "{linearInterpolation}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"arity\": number, \"func\": *}"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "getCubicSpline",
    "memberof": "ivis-core/client/src/lib/animation-interpolations.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ivis-core/client/src/lib/animation-interpolations.js~getCubicSpline",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/lib/animation-interpolations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "xs",
        "types": [
          "*"
        ]
      },
      {
        "name": "ys",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "name": "getCubicSplineMemoized",
    "memberof": "ivis-core/client/src/lib/animation-interpolations.js",
    "static": true,
    "longname": "ivis-core/client/src/lib/animation-interpolations.js~getCubicSplineMemoized",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/lib/animation-interpolations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "cubicSplineIntpFunction",
    "memberof": "ivis-core/client/src/lib/animation-interpolations.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ivis-core/client/src/lib/animation-interpolations.js~cubicSplineIntpFunction",
    "access": "public",
    "export": false,
    "importPath": "ivis-core/ivis-core/client/src/lib/animation-interpolations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "xs",
        "types": [
          "*"
        ]
      },
      {
        "name": "ys",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "name": "cubicInterpolation",
    "memberof": "ivis-core/client/src/lib/animation-interpolations.js",
    "static": true,
    "longname": "ivis-core/client/src/lib/animation-interpolations.js~cubicInterpolation",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/lib/animation-interpolations.js",
    "importStyle": "{cubicInterpolation}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{\"arity\": number, \"func\": *}"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "expensiveCubicInterpolation",
    "memberof": "ivis-core/client/src/lib/animation-interpolations.js",
    "static": true,
    "longname": "ivis-core/client/src/lib/animation-interpolations.js~expensiveCubicInterpolation",
    "access": "public",
    "export": true,
    "importPath": "ivis-core/ivis-core/client/src/lib/animation-interpolations.js",
    "importStyle": "{expensiveCubicInterpolation}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "{\"arity\": number, \"func\": *}"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# IVIS-CORE\n## Introduction \nIVIS-CORE project provides core components, and modules in order to develop and realize modern Web applications for data visualization, and analytics.\n\nIVIS is a framework built on Node.js (for server-side) and ReactJS (for client side). It uses mysql for long-term data storage and ElasticSearch for complex queries over time-series data. On the client, it uses the D3 library to build complex fully custom interactive visualizations.\n\nIn particular, this project offers the visualization components (LineChart, AreaChart, OnOffAreaChart, PieChart) and other core functionalities at the client- and the server-side for the development of domain-specific applications through IVIS extensions.\n\n## Structure\nThis project consists of the client-, and the server-side modules. The client module provides all components (UI components, visualization), libraries, etc. that will be presented to the users of Web applications through Web browsers. While the server-side module provides all components, services, and libraries to operate security, database, searching, indexing, etc.\n\n## Technologies\nIVIS-CORE has been realized on top of several technologies, in particular based on JavaScript ecosystem, as the following:\n\n- Frontend: \n-- User Interface: Reactjs (a javascript library)\n-- User Interface Design: bootstrap\n-- Visualizations: D3 (a javascript library)\n-- JSX:\n- Backend:\n-- IVIS routes, and API: NodeJS\n-- Database: MySQL\n-- Indexing & Searching: ElasticSearch\n-- Security: Passport\n\n\n## Quick Start\n\n### Preparation\nThe project creates three URL endpoints, which are referred to as \"trusted\", \"sandbox\" and \"public\". This allows IVIS\nto guarantee security and avoid XSS attacks in the multi-user settings. The function of these three endpoints is as follows:\n- *trusted* - This is the main endpoint for the UI that a logged-in user uses to manage lists, send campaigns, etc.\n- *sandbox* - This is an endpoint not directly visible to a user. It is used to host user-defined panels.\n- *API* - This is an endpoint for subscribers. It is used to host subscription management forms, files and archive.\n\nThe recommended deployment of IVIS is to use 3 DNS entries that all points to the **same** IP address. For example as follows:\n- *ivis.example.com* - trusted endpoint (A record `ivis` under `example.com` domain)\n- *sbox.ivis.example.com* - sandbox endpoint (CNAME record `sbox.ivis` under `example.com` domain that points to `ivis`)\n- *api.ivis.example.com* - public endpoint (CNAME record `api.ivis` under `example.com` domain that points to `ivis`)\n\n\n### Installation on fresh CentOS 8, CentOS 7 or Ubuntu 18.04 LTS (public website secured by SSL)\n\nThis will setup a publicly accessible IVIS instance. Endpoints trusted and sandbox will provide both HTTP (on port 80)\nand HTTPS (on port 443). The HTTP ports just issue HTTP redirect to their HTTPS counterparts. The API endpoit will be \navailable only via HTTPS. \n\nThe script below will also acquire a valid certificate from [Let's Encrypt](https://letsencrypt.org/).\nIf you are hosting IVIS on AWS or some other cloud provider, make sure that **before** running the installation\nscript you allow inbound connection to ports 80 (HTTP) and 443 (HTTPS).\n\n**Note,** that this will automatically accept the Let's Encrypt's Terms of Service.\nThus, by running this script below, you agree with the Let's Encrypt's Terms of Service (https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf).\n\n\n\n1. Login as root. (We had some problems running npm as root on CentOS 7 on AWS. This seems to be fixed by the seemingly extraneous `su` within `sudo`.)\n    ```\n    sudo su -\n    ```\n\n2. Install GIT\n\n   For CentOS 8 type:\n    ```\n    dnf install -y git\n    ```\n\n   For CentOS 7 type:\n    ```\n    yum install -y git\n    ```\n\n   For Ubuntu 18.04 LTS type\n    ```\n    apt-get install -y git\n    ```\n\n3. Download IVIS using git to the `/opt/ivis-core` directory\n    ```\n    cd /opt\n    git clone https://github.com/smartarch/ivis-core.git\n    cd ivis-core\n    ```\n\n4. Run the installation script. Replace the urls and your email address with the correct values. **NOTE** that running this script you agree\n   Let's Encrypt's conditions.\n\n   For CentOS 8 type:\n    ```\n    bash setup/install-centos8-https.sh ivis.example.com sbox.ivis.example.com api.ivis.example.com admin@example.com\n    ```\n\n   For CentOS 7 type:\n    ```\n    bash setup/install-centos7-https.sh ivis.example.com sbox.ivis.example.com api.ivis.example.com admin@example.com\n    ```\n\n   For Ubuntu 18.04 LTS type:\n    ```\n    bash setup/install-ubuntu1804-https.sh ivis.example.com sbox.ivis.example.com api.ivis.example.com admin@example.com\n    ```\n\n5. Start IVIS and enable to be started by default when your server starts.\n    ```\n    systemctl start ivis-core\n    systemctl enable ivis-core\n    ```\n\n6. Open the trusted endpoint (like `https://ivis.example.com`)\n\n7. Authenticate as `admin`:`test`\n\n8. Update your password under Account/Profile\n\n\n\n### Installation on fresh CentOS 8, CentOS 7 or Ubuntu 18.04 LTS (local installation)\n\nThis will setup a locally accessible IVIS instance (primarily for development and testing).\nAll endpoints (trusted, sandbox, public) will provide only HTTP as follows:\n- http://localhost:8080 - trusted endpoint\n- http://localhost:8081 - sandbox endpoint\n- http://localhost:8082 - api endpoint\n\n1. Login as root. (We had some problems running npm as root on CentOS 7 on AWS. This seems to be fixed by the seemingly extraneous `su` within `sudo`.)\n    ```\n    sudo su -\n    ```\n\n2. Install GIT\n\n   For CentOS 8 type:\n    ```\n    dnf install -y git\n    ```\n\n   For CentOS 7 type:\n    ```\n    yum install -y git\n    ```\n\n   For Ubuntu 18.04 LTS type\n    ```\n    apt-get install -y git\n    ```\n\n3. Download IVIS using git to the `/opt/ivis-core` directory\n    ```\n    cd /opt\n    git clone https://github.com/smartarch/ivis-core.git\n    cd ivis-core\n    ```\n\n4. Run the installation script.\n\n   For CentOS 8 type:\n    ```\n    bash setup/install-centos8-local.sh\n    ```\n\n   For CentOS 7 type:\n    ```\n    bash setup/install-centos7-local.sh\n    ```\n\n   For Ubuntu 18.04 LTS type:\n    ```\n    bash setup/install-ubuntu1804-local.sh\n    ```\n\n5. Start IVIS and enable to be started by default when your server starts.\n    ```\n    systemctl start ivis-core\n    systemctl enable ivis-core\n    ```\n\n6. Open the trusted endpoint (like `http://localhost:3000`)\n\n7. Authenticate as `admin`:`test`\n\n8. Update your password under Account/Profile\n\n\n\n\n## License\n\n  **MIT**\n",
    "longname": "/home/dburian/Documents/bak/ivis-core/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]